server:
  port: 9002
spring:
  application:
    name: shop-service-order
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/spring_cloud?characterEncoding=utf8&serverTimezone=UTC
    username: root
    password: 123456
  jpa:
    database: mysql
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL57Dialect

  #客户端配置sentinel让sentinel监控到应用的情况
  cloud:
    sentinel:
      transport:
        #sentinel控制台的地址
        dashboard: localhost:8081
        #让sentinel监控这个应用的API端口（不能冲突，每个应用指定一个端口）
        port: 8720
      #关闭延时加载
      eager: true

#在服务消费方配置负载均衡策略，下面为服务提供方id及负载均衡策略
#com.netflix.loadbalancer.RoundRobinRule ：以轮询的方式进行负载均衡。
#com.netflix.loadbalancer.RandomRule ：随机策略
#com.netflix.loadbalancer.RetryRule ：重试策略。
#com.netflix.loadbalancer.WeightedResponseTimeRule ：权重策略。会计算每个服务的权重，越高的被调用的可能性越大。
#com.netflix.loadbalancer.BestAvailableRule ：最佳策略。遍历所有的服务实例，过滤掉故障实例，并返回请求数最小的实例返回。
#com.netflix.loadbalancer.AvailabilityFilteringRule ：可用过滤策略。过滤掉故障和请求数超过阈值的服务实例，再从剩下的实力中轮询调用。
#客户端负载均衡和服务端负载均衡最大的区别在于服务清单所存储的位置。在客户端负载均衡中，所有的客户端节点都有一份自己要访问的服务端清单，这些清单统统都是从Eureka服务注册中心获取的。
shop-service-product:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule

eureka:
  client:
    #Eureka服务端路径
    serviceUrl:
      defalutZone: http://eureka1:8761/eureka,http://eureka2:8762/eureka
  instance:
    #使用IP注册
    prefer-ip-address: true
    #自定义注册名字 ，spring.cloud.client.ip-address为springcloud获取本机ip地址
    instance-id: ${spring.cloud.client.ip-address}:${server.port}

# Feign的配置 配置方式可通过代码或者配置文件
#feign:
#  client:
#    config:
#      feignName: ##定义FeignClient的名称
#        connectTimeout: 5000 #  建立链接的超时时长 | 相当于Request.Options
#        readTimeout: 5000 # 相当于Request.Options | 读取超时时长
#        # 配置Feign的日志级别，相当于代码配置方式中的Logger
#        loggerLevel: full
#        # Feign的错误解码器，相当于代码配置方式中的ErrorDecoder
#        errorDecoder: com.example.SimpleErrorDecoder
#        # 配置重试，相当于代码配置方式中的Retryer
#        retryer: com.example.SimpleRetryer
#        # 配置请求拦截器，相当于代码配置方式中的RequestInterceptor
#        requestInterceptors:
#          - com.example.FooRequestInterceptor
#          - com.example.BarRequestInterceptor
#        decode404: false
#  compression:
#    request:
#      enabled: true # 开启请求压缩
#      mime-types: text/html,application/xml,application/json # 设置压缩的数据类型
#      min-request-size: 2048 # 设置触发压缩的大小下限
#    response:
#      enabled: true # 开启响应压缩
#---
#feign:
#  client:
#    config:
#      shop-service-product: #定义FeignClient的名称
#      loggerLevel: FULL #配置Feign的日志Feign有四种日志级别
#logging:
#  level:
#    # Feign日志只会对日志级别为debug的做出响应
#    com.shop.order.feign.ProductFeginClient: debug


#feign集成sentinel配置
feign:
  sentinel:
    enabled: true



